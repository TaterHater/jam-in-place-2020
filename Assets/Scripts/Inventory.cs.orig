using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Inventory : MonoBehaviour
{
    //private static BaseItem filler = new EmptyItem();

    int yield = 0;
    [SerializeField]
<<<<<<< HEAD
    GameObject yieldText=null;
    public Dictionary<ItemType, int> items = new Dictionary<ItemType, int>();

=======
    int capacity = 9;
    [SerializeField]
    GameObject yieldText = null;
    public List<BaseItem> items;
    private int activeItemIndex = 0;
    public Text SeedAmountText;
>>>>>>> aaf11f9bddbcde713b993f8eeb3e4d70abc6f95f

    public int Yield { get => yield; set { yield = value; if (yieldText != null) yieldText.GetComponent<UnityEngine.UI.Text>().text = value.ToString(); } }

    void Start()
    {
<<<<<<< HEAD
        items.Add(ItemType.Seeds,1);
        items.Add(ItemType.WaterThingy, 0);
        items.Add(ItemType.Fish, 0);
        items.Add(ItemType.Butterfly, 0);
        
    }

 
    public void Use(ItemType item) {
        items[item] = Math.Max(items[item] - 1, 0);
=======
        items = new List<BaseItem>(capacity);
        for (int i = 0; i < capacity; i++)
        {
            items.Add(new Seeds());
        }
        UpdateSeedDisplay();
    }
    void UpdateSeedDisplay()
    {
        SeedAmountText.text = items.Count.ToString();
    }

    public object Use(BaseItem item)
    {
        object useResult = item.Use();
        if (item.IsConsumable())
            items[items.IndexOf(item)] = filler;
        return useResult;
>>>>>>> aaf11f9bddbcde713b993f8eeb3e4d70abc6f95f
    }
    public void GainItem(ItemType item)
    {
<<<<<<< HEAD
        items[item]++;
    }

    public bool Have(ItemType item) {
        return items[item] > 0;
    }
   

   
    

    bool BuyItem(ItemType item,int amount)
    {
        if (amount>Yield) return false;
        GainItem(item);
=======
        UpdateSeedDisplay();
        return Use(GetActiveItem());
    }

    bool GainItem(BaseItem item)
    {
        if (items.Count >= capacity) return false;
        items.Add(item);
        UpdateSeedDisplay();
        return true;
    }


    bool BuyItem(BaseItem item, int amount)
    {
        if (items.Count >= capacity || amount > Yield) return false;
        items.Add(item);
>>>>>>> aaf11f9bddbcde713b993f8eeb3e4d70abc6f95f
        Yield -= amount;
        return true;
    }



  


    public enum ItemType
    {
        Seeds = 0, WaterThingy = 1, Fish = 2, Butterfly = 3
    }
}

